plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// 读取keystore配置文件
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

android {
    namespace "com.xreader.app"
    compileSdk 35
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.xreader.app"
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        
        // 多语言支持
        resConfigs "zh", "en"
        
        // 文件提供者权限
        manifestPlaceholders = [
            'appAuthority': '${applicationId}.fileprovider',
            'applicationName': 'io.flutter.app.FlutterApplication'
        ]
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            // 签名配置 - 如果存在keystore文件则使用，否则使用debug签名
            signingConfig keystorePropertiesFile.exists() ? signingConfigs.release : signingConfigs.debug
            
            // 代码混淆和优化
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // 构建配置
            manifestPlaceholders = [
                'appName': 'XReader',
                'appIcon': '@mipmap/ic_launcher',
                'applicationName': 'io.flutter.app.FlutterApplication',
                'appAuthority': '${applicationId}.fileprovider'
            ]
        }
        
        debug {
            manifestPlaceholders = [
                'appName': 'XReader Debug',
                'appIcon': '@mipmap/ic_launcher',
                'applicationName': 'io.flutter.app.FlutterApplication',
                'appAuthority': '${applicationId}.fileprovider'
            ]
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10"
}